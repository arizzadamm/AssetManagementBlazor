@page "/Orders"
@using AssetManagementsBlazor.Components.Pages.Dialog
@using AssetManagementsBlazor.ViewModel
@inject IOrderService OrderService
@inject IOrderDetailService OrderDetailService
@inject NavigationManager NavigationManager
@attribute [StreamRendering(false)]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject MudBlazor.IDialogService DialogService
@inject MudBlazor.ISnackbar Snackbar

<MudDialogProvider />
<MudSnackbarProvider />

<MudTable Items="@orders" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">List Order</MudText>
        <MudSpacer />
        <MudSpacer />
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.SendToMobile" OnClick="OpenAddProduct" Variant="Variant.Filled">Add Product</MudButton>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Order Number</MudTh>
        <MudTh>Customer Name</MudTh>
        <MudTh>Order date</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
            <MudTd>@context.OrderNumber</MudTd>
            <MudTh>@context.CustomerName</MudTh>
            <MudTd>@context.OrderDate</MudTd>
            <MudTd>
                <MudButton OnClick="() => OpenDeleteDialog(context.OrderNumber,context.OrderOid)" Color="Color.Error" Variant="Variant.Filled">
                    Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>




    @code {
    private bool _loading;

    private List<OrderViewModel>? orders;
    // private OrderViewModel newOrder = new OrderViewModel();


    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        orders = await OrderService.GetAllOrders();
        _loading = false;
    }

    private async Task OpenDeleteDialog(string orderNumber, Guid OrderOid)
    {
        var parameters = new DialogParameters
        {
            { "ItemName", orderNumber },
            { "CategoryOid", OrderOid }
        };

        var dialog = DialogService.Show<DeleteDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Handle deletion confirmation
            await OrderDetailService.DeleteOrder(OrderOid);
            await OrderService.DeleteOrder(OrderOid);
            Snackbar.Add("Category deleted successfully", Severity.Success);
        }
    }

    private async Task OpenAddProduct()
    {
        NavigationManager.NavigateTo("/Add-Order");
    }

    // private async Task OpenAddProductDialog()
    // {
    //     var parameters = new DialogParameters
    //     {
    //         { "OnValidSubmit", EventCallback.Factory.Create<ProductViewModel>(this, AddProduct) }
    //     };

    //     var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    //     DialogService.Show<AddProductDialog>("Add New Product", parameters, options);
    // }
    // private async Task AddProduct(ProductViewModel newProduct)
    // {
    //     try
    //     {
    //         var addedProduct = await ProductService.AddProduct(newProduct);
    //         products.Add(new ProductViewModel
    //             {
    //                 ProductName = addedProduct.ProductName,
    //                 CategoryOid = addedProduct.CategoryOid,
    //                 Description = addedProduct.Description,
    //                 Price = addedProduct.Price,
    //                 StockQuantity = addedProduct.StockQuantity
    //             });
    //         // Tambahkan ke daftar lokal dan refresh tampilan
    //         newProduct = new ProductViewModel();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine(ex.Message);
    //     }


    // }

}
