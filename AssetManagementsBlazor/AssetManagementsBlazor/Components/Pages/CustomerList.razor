@page "/Customers"
@using AssetManagementsBlazor.Components.Pages.Dialog
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@attribute [StreamRendering(false)]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject MudBlazor.IDialogService DialogService
@inject MudBlazor.ISnackbar Snackbar

<MudDialogProvider />
<MudSnackbarProvider />


<h3>Customer List</h3>

@if (_customers == null)
{
    <span>Loading...</span>
}
else if (_customers.Count == 0)
{
    <span>No Customers Found </span>
}
else
{
    <MudTable Items="@_customers" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Daftar Customer</MudText>
            <MudSpacer />
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.SendToMobile" OnClick="OpenAddCustomerDialog" Variant="Variant.Filled">Add Product</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>City</MudTh>
            <MudTh> Action </MudTh>
        </HeaderContent> 
        <RowTemplate>
            <MudTd>@context.FirstName</MudTd>
            <MudTd>@context.LastName</MudTd>
             <MudTd>@context.City</MudTd>
                <MudTd>
                    <MudButton OnClick="() => OpenDeleteDialog(context.FirstName,context.CustomersOid)" Color="Color.Error" Variant="Variant.Filled">
                        Delete
                    </MudButton>
                </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    List<Customers>? _customers = null;

    protected override async Task OnInitializedAsync()
    {
        _customers = await CustomerService.GetAllCustomer();
    }
    private async Task AddCustomer(Customers customers)
    {
        try
        {
            var addedCustomer = await CustomerService.AddCustomer(customers);

            // Tambahkan ke daftar lokal dan refresh tampilan
            _customers.Add(addedCustomer);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OpenAddCustomerDialog()
    {
        var parameters = new DialogParameters();

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = DialogService.Show<AddCustomerDialog>("Add New Customer", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newCustomer = result.Data as Customers; // Pastikan Customers adalah model yang sesuai
            if (newCustomer != null)
            {
                await AddCustomer(newCustomer);
                Snackbar.Add("Customer Add successfully", Severity.Success);
            }
        }

    }
    private async Task OpenDeleteDialog(string FirstName, Guid CustomersOid)
    {
        var parameters = new DialogParameters
        {
            { "ItemName", FirstName },
            { "CategoryOid", CustomersOid }
        };

        var dialog = DialogService.Show<DeleteDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Handle deletion confirmation
            await CustomerService.DeleteCustomer(CustomersOid);
            Snackbar.Add("Customer deleted successfully", Severity.Success);
            _customers = await CustomerService.GetAllCustomer();
        }
    }
    private bool _loading;
}
