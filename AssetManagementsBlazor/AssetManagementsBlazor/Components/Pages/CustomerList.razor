@page "/Customers"
@using AssetManagementsBlazor.Components.Pages.Dialog
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@attribute [StreamRendering(false)]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject MudBlazor.IDialogService DialogService
@inject MudBlazor.ISnackbar Snackbar

<MudDialogProvider />
<MudSnackbarProvider />


<h3>Customer List</h3>

@if (customers == null)
{
    <span>Loading...</span>
}
else if (customers.Count == 0)
{
    <span>No Customers Found </span>
}
else
{
    <MudTable Items="@customers" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Daftar Customer</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>City</MudTh>
            <MudTh> Action </MudTh>
        </HeaderContent> 
        <RowTemplate>
            <MudTd>@context.FirstName</MudTd>
            <MudTd>@context.LastName</MudTd>
             <MudTd>@context.City</MudTd>
                <MudTd>
                    <MudButton OnClick="() => OpenDeleteDialog(context.FirstName,context.CustomersOid)" Color="Color.Error" Variant="Variant.Filled">
                        Delete
                    </MudButton>
                </MudTd>
        </RowTemplate>
    </MudTable>

       @*  @foreach (var customer in customers)
        {

            <td>@customer.FirstName</td>
            <td>@customer.LastName</td>
            <td>@customer.City</td>
            <td>
            <MudButton OnClick="() => OpenDeleteConfirmationDialog(customer.CustomersOid)" Color="Color.Error" Variant="Variant.Filled">
                Delete
            </MudButton>
            </td>
        } *@
}
<CreateCustomerButton></CreateCustomerButton>

@code {
    List<Customers>? customers = null;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetAllCustomer();
    }
    private async Task OpenDeleteDialog(string FirstName, Guid CustomersOid)
    {
        var parameters = new DialogParameters
        {
            { "ItemName", FirstName },
            { "CategoryOid", CustomersOid }
        };

        var dialog = DialogService.Show<DeleteDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Handle deletion confirmation
            await CustomerService.DeleteCustomer(CustomersOid);
            Snackbar.Add("Customer deleted successfully", Severity.Success);
        }
    }
    // private async Task OpenDeleteConfirmationDialog(Guid customersOid)
    // {
    //     var options = new DialogOptions { CloseButton = true };

    //     var dialog = DialogService.Show<DeleteConfirmationDialog>("Delete Confirmation", options);
    //     var result = await dialog.Result;
    //     if (!result.Canceled && (bool)result.Data)
    //     {
    //         await DeleteCustomer(customersOid);
    //         Snackbar.Add("Customer deleted successfully", Severity.Success);
    //     }
    // }


    private bool _loading;
}
