@page "/Category"
@using AssetManagementsBlazor.Components.Pages.Dialog
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@attribute [StreamRendering(false)]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject MudBlazor.IDialogService DialogService
@inject MudBlazor.ISnackbar Snackbar

<MudDialogProvider />
<MudSnackbarProvider />

<h3>Category List</h3>

<MudTable Items="@categories" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Daftar Category</MudText>
        <MudSpacer />
        <MudSpacer />
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.SendToMobile" OnClick="OpenAddCategoryDialog" Variant="Variant.Filled">Add Category</MudButton>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Category Name</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
            <MudTd>
                <MudButton OnClick="() => OpenDeleteDialog(context.Name,context.CategoryOid)" Color="Color.Error" Variant="Variant.Filled">
                Delete
                </MudButton>
            </MudTd>
    </RowTemplate>
</MudTable>
    



    @code {
    private bool _loading;

    List<Category>? categories = null;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAllCategory();
    }

    private async Task OpenDeleteDialog(string Name,Guid categoryOid)
    {
        var parameters = new DialogParameters
        {
            { "ItemName", Name },
            { "CategoryOid", categoryOid }
        };

        var dialog = DialogService.Show<DeleteDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Handle deletion confirmation
            await CategoryService.DeleteCategory(categoryOid);
            Snackbar.Add("Category deleted successfully", Severity.Success);
        }
    }

    private async Task OpenAddCategoryDialog()
    {
        var dialog = DialogService.Show<AddCategoryDialog>("Add Category");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Handle deletion confirmation
            var newCategoryName = result.Data as string;
            await AddCategory(newCategoryName);
        }
    }
    private async Task AddCategory(string categoryName)
    {
        var newCategory = new Category
            {
                Name = categoryName
            };
        try
        {
            var addedCategory = await CategoryService.AddCategory(newCategory);

            // Tambahkan ke daftar lokal dan refresh tampilan
            categories.Add(addedCategory);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    
    }

}
